// Code generated by MockGen. DO NOT EDIT.
// Source: cacher.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
)

// MockCacherClient is a mock of CacherClient interface.
type MockCacherClient struct {
	ctrl     *gomock.Controller
	recorder *MockCacherClientMockRecorder
}

// MockCacherClientMockRecorder is the mock recorder for MockCacherClient.
type MockCacherClientMockRecorder struct {
	mock *MockCacherClient
}

// NewMockCacherClient creates a new mock instance.
func NewMockCacherClient(ctrl *gomock.Controller) *MockCacherClient {
	mock := &MockCacherClient{ctrl: ctrl}
	mock.recorder = &MockCacherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacherClient) EXPECT() *MockCacherClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacherClient) Get(key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCacherClientMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacherClient)(nil).Get), key)
}

// Set mocks base method.
func (m *MockCacherClient) Set(key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacherClientMockRecorder) Set(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacherClient)(nil).Set), key, value, expiration)
}
